lexer_target: typescript
version: 1.0.0
delimiters: " \t\n\r;(){}[]+=-*/%&|^!<>?:.,'\"`~#@"
delimiter_check_for_types:
  - keyword
  - identifier
  - number
  - string_literal
tokens:
  # **Comments** (Place first)
  - type: multi_line_comment
    pattern: "/\\*[^*]*\\*+(?:[^/*][^*]*\\*+)*/"
  - type: single_line_comment
    pattern: "//.*"

  # **String Literals** (Before operators and punctuators)
  # Template Literals with Interpolation
  - type: template_literal
    pattern: "`([^`\\\\]|\\\\.|\\$\\{[^}]*\\})*`"
  # Double-quoted String Literals
  - type: string_literal
    pattern: "\"([^\"\\\\]|\\\\.)*\""
  # Single-quoted String Literals
  - type: string_literal
    pattern: "'([^'\\\\]|\\\\.)*'"

  # **Regular Expressions** (Placed before operators)
  - type: regular_expression
    pattern: "/([^/\\\\]|\\\\.)+/[gimsuy]*"

  # **Operators** (Multi-character operators before single-character ones)
  - type: operator
    value: "==="
  - type: operator
    value: "!=="
  - type: operator
    value: ">>>="
  - type: operator
    value: ">>="
  - type: operator
    value: "<<="
  - type: operator
    value: "**="
  - type: operator
    value: "+="
  - type: operator
    value: "-="
  - type: operator
    value: "*="
  - type: operator
    value: "/="
  - type: operator
    value: "%="
  - type: operator
    value: "&="
  - type: operator
    value: "^="
  - type: operator
    value: "|="
  - type: operator
    value: "=>"
  - type: operator
    value: "=="
  - type: operator
    value: "!="
  - type: operator
    value: ">="
  - type: operator
    value: "<="
  - type: operator
    value: "&&"
  - type: operator
    value: "||"
  - type: operator
    value: "++"
  - type: operator
    value: "--"
  - type: operator
    value: "**"
  - type: operator
    value: ">>"
  - type: operator
    value: "<<"
  - type: operator
    value: "??"
  - type: operator
    value: "?."
  - type: operator
    value: "&"
  - type: operator
    value: "|"
  - type: operator
    value: "^"
  - type: operator
    value: "~"
  - type: operator
    value: "!"
  - type: operator
    value: "+"
  - type: operator
    value: "-"
  - type: operator
    value: "*"
  - type: operator
    value: "/"
  - type: operator
    value: "%"
  - type: operator
    value: "="
  - type: operator
    value: ">"
  - type: operator
    value: "<"
  - type: operator
    value: "?"
  - type: operator
    value: ":"
  - type: operator
    value: "."
  - type: operator
    value: "..."

  # **Punctuators**
  - type: punctuator
    value: "{"
  - type: punctuator
    value: "}"
  - type: punctuator
    value: "("
  - type: punctuator
    value: ")"
  - type: punctuator
    value: "["
  - type: punctuator
    value: "]"
  - type: punctuator
    value: ";"
  - type: punctuator
    value: ","

  # **Keywords** (Place before identifiers)
  - type: keyword
    value: "abstract"
  - type: keyword
    value: "any"
  - type: keyword
    value: "as"
  - type: keyword
    value: "asserts"
  - type: keyword
    value: "async"
  - type: keyword
    value: "await"
  - type: keyword
    value: "boolean"
  - type: keyword
    value: "break"
  - type: keyword
    value: "case"
  - type: keyword
    value: "catch"
  - type: keyword
    value: "class"
  - type: keyword
    value: "const"
  - type: keyword
    value: "constructor"
  - type: keyword
    value: "continue"
  - type: keyword
    value: "declare"
  - type: keyword
    value: "default"
  - type: keyword
    value: "delete"
  - type: keyword
    value: "do"
  - type: keyword
    value: "else"
  - type: keyword
    value: "enum"
  - type: keyword
    value: "export"
  - type: keyword
    value: "extends"
  - type: keyword
    value: "false"
  - type: keyword
    value: "finally"
  - type: keyword
    value: "for"
  - type: keyword
    value: "from"
  - type: keyword
    value: "function"
  - type: keyword
    value: "get"
  - type: keyword
    value: "if"
  - type: keyword
    value: "implements"
  - type: keyword
    value: "import"
  - type: keyword
    value: "in"
  - type: keyword
    value: "infer"
  - type: keyword
    value: "instanceof"
  - type: keyword
    value: "interface"
  - type: keyword
    value: "is"
  - type: keyword
    value: "keyof"
  - type: keyword
    value: "let"
  - type: keyword
    value: "module"
  - type: keyword
    value: "namespace"
  - type: keyword
    value: "never"
  - type: keyword
    value: "new"
  - type: keyword
    value: "null"
  - type: keyword
    value: "number"
  - type: keyword
    value: "object"
  - type: keyword
    value: "package"
  - type: keyword
    value: "private"
  - type: keyword
    value: "protected"
  - type: keyword
    value: "public"
  - type: keyword
    value: "readonly"
  - type: keyword
    value: "require"
  - type: keyword
    value: "global"
  - type: keyword
    value: "return"
  - type: keyword
    value: "set"
  - type: keyword
    value: "static"
  - type: keyword
    value: "string"
  - type: keyword
    value: "super"
  - type: keyword
    value: "switch"
  - type: keyword
    value: "symbol"
  - type: keyword
    value: "this"
  - type: keyword
    value: "throw"
  - type: keyword
    value: "true"
  - type: keyword
    value: "try"
  - type: keyword
    value: "type"
  - type: keyword
    value: "typeof"
  - type: keyword
    value: "undefined"
  - type: keyword
    value: "unique"
  - type: keyword
    value: "unknown"
  - type: keyword
    value: "var"
  - type: keyword
    value: "void"
  - type: keyword
    value: "while"
  - type: keyword
    value: "with"
  - type: keyword
    value: "yield"

  # **Identifiers**
  - type: identifier
    pattern: "[a-zA-Z_$][a-zA-Z0-9_$]*"

  # **Numeric Literals**
  # Binary Literals
  - type: number
    pattern: "\\b0[bB][01]+\\b"
  # Octal Literals
  - type: number
    pattern: "\\b0[oO][0-7]+\\b"
  # Hexadecimal Literals
  - type: number
    pattern: "\\b0[xX][0-9a-fA-F]+\\b"
  # Floating-Point Literals
  - type: number
    pattern: "\\b\\d+\\.\\d*([eE][+-]?\\d+)?\\b"
  # Integer Literals
  - type: number
    pattern: "\\b\\d+\\b"

  # **Whitespace**
  - type: whitespace
    pattern: "\\s+"

  # **Unknown Tokens**
  - type: unknown
    pattern: "."
